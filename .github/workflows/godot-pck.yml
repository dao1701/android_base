name: Godot PCK Build

env:
  GODOT_VERSION: 4.4.1-stable
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
  ENCRYPTION_IV: ${{ secrets.ENCRYPTION_IV }}

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Download Godot
      run: |
        wget https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_linux.x86_64.zip
        unzip Godot_v${{ env.GODOT_VERSION }}_linux.x86_64.zip
        chmod +x Godot_v${{ env.GODOT_VERSION }}_linux.x86_64

    - name: Create PCK file
      run: |
        ./Godot_v${{ env.GODOT_VERSION }}_linux.x86_64 --export-pack Android project.pck . --headless
    - name: Upload PCK file
      uses: actions/upload-artifact@v4
      with:
        name: project-pck
        path: project.pck
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Download PCK artifact
        uses: actions/download-artifact@v4
        with:
          name: project-pck

      - name: Install OpenSSL
        run: sudo apt-get install -y openssl

      - name: Encrypt PCK
        run: |
          # Convert hex string to binary format for OpenSSL
          KEY_HEX=$(echo -n "${{ env.ENCRYPTION_KEY }}" | xxd -p -c 64)
          IV_HEX=$(echo -n "${{ env.ENCRYPTION_IV }}" | xxd -p -c 32)
          
          # Encrypt PCK file using AES-256-CBC
          openssl enc -aes-256-cbc -in project.pck -out project.pck.enc -K "$KEY_HEX" -iv "$IV_HEX" -nosalt
          mv project.pck.enc project.pck

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch --tags

      - name: Get version/tag
        id: vars
        run: |
          TAG_NAME="release-$(date +'%Y%m%d%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          # Create version info as JSON
          echo "{
            \"release\": \"$TAG_NAME\",
            \"commit\": \"${{ github.sha }}\",
            \"buildDate\": \"$(date +'%Y-%m-%d %H:%M:%S')\",
            \"branch\": \"${{ github.ref_name }}\",
            \"lastCommitMessage\": \"$(git log -1 --pretty=%B)\"
          }" > version.json

      - name: Create Git tag
        run: |
          git tag ${{ steps.vars.outputs.tag_name }}
          git push origin ${{ steps.vars.outputs.tag_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          name: Release ${{ steps.vars.outputs.tag_name }}
          files: |
            project.pck
            version.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
