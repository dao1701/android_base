# Workflow name
name: Godot PCK Build

# Environment variables
env:
  GODOT_VERSION: 4.4.1-stable         # Godot engine version
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}  # PCK encryption key
  ENCRYPTION_IV: ${{ secrets.ENCRYPTION_IV }}    # PCK encryption IV
  KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}  # Android keystore base64
  KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}  # Keystore password
  KEY_ALIAS: ${{ secrets.KEY_ALIAS }}  # Key alias
  KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}  # Key password

# Trigger events
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Build job: Creates the PCK file
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v3

      # Configure project settings
      - name: Add addons config
        run: |
          # Add addon source URL to project.godot
          echo -e "\n[addons]\nsource_url = \"https://github.com/dao1701/android_base/releases/latest/download\"" >> project.godot

      - name: Add encryption config
        run: |
          # Add encryption keys to project.godot
          echo -e "\n[encryption]\nkey=\"${{ env.ENCRYPTION_KEY }}\"\niv=\"${{ env.ENCRYPTION_IV }}\"" >> project.godot

      # Setup Godot
      - name: Download Godot
        run: |
          # Download and prepare Godot executable
          wget https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_linux.x86_64.zip
          unzip Godot_v${{ env.GODOT_VERSION }}_linux.x86_64.zip
          chmod +x Godot_v${{ env.GODOT_VERSION }}_linux.x86_64

      # Create and upload PCK
      - name: Create PCK file
        run: |
          ./Godot_v${{ env.GODOT_VERSION }}_linux.x86_64 --export-pack Android project.pck . --headless

      - name: Upload PCK file
        uses: actions/upload-artifact@v4
        with:
          name: project-pck
          path: project.pck

  # Build Android APK job
  build-android:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Setup Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3      
      # Download Godot and export templates
      - name: Download Godot
        run: |
          wget https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_linux.x86_64.zip
          wget https://github.com/godotengine/godot/releases/download/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}_export_templates.tpz
          unzip Godot_v${{ env.GODOT_VERSION }}_linux.x86_64.zip
          mkdir -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}
          unzip Godot_v${{ env.GODOT_VERSION }}_export_templates.tpz -d ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}
          chmod +x Godot_v${{ env.GODOT_VERSION }}_linux.x86_64

      # Setup Android keystore
      - name: Create keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > debug.keystore
          
      # Build APK
      - name: Build APK
        run: |
          ls -a
          chmod +x ./android/build/gradlew
          ./Godot_v${{ env.GODOT_VERSION }}_linux.x86_64 --headless --export-debug "Android"
        env:
          ANDROID_KEYSTORE_PATH: debug.keystore
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          
      # Upload APK artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: Base-game.apk

  # Release job: Creates GitHub release with encrypted PCK
  release:
    needs: [build, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      # Get code and artifacts
      - uses: actions/checkout@v3

      - name: Download PCK artifact
        uses: actions/download-artifact@v4
        with:
          name: project-pck

      - name: Encrypt PCK
        run: |
          KEY="${{ env.ENCRYPTION_KEY }}"
          IV="${{ env.ENCRYPTION_IV }}"
          echo "Using encryption key: $KEY"
          echo "Using IV: $IV"
          openssl enc -aes-256-cbc -in project.pck -out project.encrypted.pck -K $KEY -iv $IV -nosalt
      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git fetch --prune --unshallow || git fetch # Fetch full history
          git fetch --tags # Fetch all tags

      - name: Get version/tag
        id: vars
        run: |
          TAG_NAME="release-$(date +'%Y%m%d%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Get previous tag safely
          PREV_TAG=$(git tag -l | sort -V | tail -n 1 || echo "")
          echo "Previous tag: $PREV_TAG"
          PREV_COMMIT=$(git rev-parse ${PREV_TAG})
          LATEST_COMMIT=$(git rev-parse HEAD)
          echo "Previous commit: $PREV_COMMIT"
          echo "Latest commit: $LATEST_COMMIT"
          # Create version info as JSON
          echo "{
            \"release\": \"$TAG_NAME\",
            \"buildDate\": \"$(date +'%Y-%m-%d %H:%M:%S')\",
            \"branch\": \"${{ github.ref_name }}\",
            \"lastCommitMessage\": \"$(git log -1 --pretty=%B)\",
            \"previousTag\": \"${PREV_TAG:-initial}\"
          }" > version.json
      # Generate detailed changes between releases
      - name: Generate version.diff
        run: |
          if [ -n "$PREV_TAG" ]; then
            # If there was a previous tag, show changes since then
            echo "Changes since $PREV_TAG:" > version.diff
            echo -e "\nCommit History:" >> version.diff
            git log --pretty=format:"%h - %s (%cr) <%an>" $PREV_TAG..HEAD >> version.diff
            echo -e "\n\nChanged Files:" >> version.diff
            git diff --name-status $PREV_TAG..HEAD | while read -r status file; do
              case $status in
                "A") echo "+ Added:    $file" >> version.diff ;;
                "M") echo "~ Modified: $file" >> version.diff ;;
                "D") echo "- Deleted:  $file" >> version.diff ;;
                *) echo "? Changed:  $file" >> version.diff ;;
              esac
            done
          else
            # If this is the first tag, show all changes
            echo "Initial Release" > version.diff
            echo -e "\nCommit History:" >> version.diff
            git log --pretty=format:"%h - %s (%cr) <%an>" >> version.diff
            echo -e "\n\nInitial Files:" >> version.diff
            git ls-tree -r --name-only HEAD >> version.diff
          fi
      - name: Create Git tag
        run: |
          git tag ${{ steps.vars.outputs.tag_name }}
          git push origin ${{ steps.vars.outputs.tag_name }}

      - name: Generate all_releases.json
        run: |
          echo "[" > all_releases.json
          git tag -l | sort -V | while read -r tag; do
            if [ ! -z "$tag" ]; then
              commit_hash=$(git rev-parse $tag)
              commit_date=$(git log -1 --format=%ai $tag)
              commit_msg=$(git log -1 --format=%B $tag)
              if [ "$(head -c 2 all_releases.json)" != "[{" ]; then
                echo "," >> all_releases.json
              fi
              echo "{
                \"tag\": \"$tag\",
                \"date\": \"$commit_date\",
                \"commit\": \"$commit_hash\",
                \"message\": \"$commit_msg\"
              }" >> all_releases.json
            fi
          done
          echo "]" >> all_releases.json

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: android-release
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag_name }}
          name: Release ${{ steps.vars.outputs.tag_name }}
          files: |
            project.encrypted.pck
            version.json
            version.diff
            all_releases.json
            game.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
